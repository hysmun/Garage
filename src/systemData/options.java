/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package systemData;

import java.text.SimpleDateFormat;
import java.util.TimeZone;
import mainPackages.threadDate;

/**
 *
 * @author Morghen
 */
public class options extends javax.swing.JDialog {
    
    public options(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        regionLabel = new javax.swing.JLabel();
        dateFormatLabel = new javax.swing.JLabel();
        timeFormatLabel = new javax.swing.JLabel();
        regionCB = new javax.swing.JComboBox<>();
        dateFormatCB = new javax.swing.JComboBox<>();
        timeFormatCB = new javax.swing.JComboBox<>();
        OKButton = new javax.swing.JButton();
        CancelButton = new javax.swing.JButton();
        ApplyButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Garage HEPL - Format date");
        setName("optionDialog"); // NOI18N

        regionLabel.setText("Région :");

        dateFormatLabel.setText("Format de la date :");

        timeFormatLabel.setText("Format du temps :");

        regionCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "France", "Royaume Uni", "Allemagne", "Italie", "U.S.A. (côte ouest)", "U.S.A. (côte est)" }));

        dateFormatCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "DD/MM/YY", "DD/MMMM/YY", "DD/MM/YYYY", "DD/MMMM/YYYY", "MM/DD/YY", "MM/DD/YYYY", "YYYY/MM/DD" }));

        timeFormatCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "HH:MM:SS (12h)", "HH:MM:SS (24h)" }));

        OKButton.setText("OK");
        OKButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OKButtonActionPerformed(evt);
            }
        });

        CancelButton.setText("Annuler");
        CancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelButtonActionPerformed(evt);
            }
        });

        ApplyButton.setText("Appliquer");
        ApplyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ApplyButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(75, 75, 75)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(dateFormatLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(dateFormatCB, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(regionLabel)
                        .addGap(107, 107, 107)
                        .addComponent(regionCB, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(timeFormatLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(timeFormatCB, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(64, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(OKButton)
                .addGap(18, 18, 18)
                .addComponent(CancelButton)
                .addGap(18, 18, 18)
                .addComponent(ApplyButton)
                .addGap(134, 134, 134))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(74, 74, 74)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(regionLabel)
                    .addComponent(regionCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dateFormatLabel)
                    .addComponent(dateFormatCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(timeFormatLabel)
                    .addComponent(timeFormatCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 69, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(OKButton)
                    .addComponent(CancelButton)
                    .addComponent(ApplyButton))
                .addGap(63, 63, 63))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void OKButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OKButtonActionPerformed
        // TODO add your handling code here:
        switch(regionCB.getSelectedIndex())
        {
            case 0:
                switch(dateFormatCB.getSelectedIndex())
                {
                    case 0:
                        switch(timeFormatCB.getSelectedIndex())
                        {
                            case 0:
                                threadDate.tz = TimeZone.getTimeZone("Europe/France");
                                threadDate.formatDate = new SimpleDateFormat("dd/MM/yy h:mm:ss a");
                                break;
                            case 1:
                                threadDate.tz = TimeZone.getTimeZone("Europe/France");
                                threadDate.formatDate = new SimpleDateFormat("dd/MM/yy HH:mm:ss");
                                break;
                        }
                        break;
                    case 1:
                        switch(timeFormatCB.getSelectedIndex())
                        {
                            case 0:
                                threadDate.tz = TimeZone.getTimeZone("Europe/France");
                                threadDate.formatDate = new SimpleDateFormat("dd MMMM yy h:mm:ss a");
                                break;
                            case 1:
                                threadDate.tz = TimeZone.getTimeZone("Europe/France");
                                threadDate.formatDate = new SimpleDateFormat("dd MMMM yy HH:mm:ss");
                                break;
                        }
                        break;
                    case 2:
                        switch(timeFormatCB.getSelectedIndex())
                        {
                            case 0:
                                threadDate.tz = TimeZone.getTimeZone("Europe/France");
                                threadDate.formatDate = new SimpleDateFormat("dd/MM/yyyy h:mm:ss a");
                                break;
                            case 1:
                                threadDate.tz = TimeZone.getTimeZone("Europe/France");
                                threadDate.formatDate = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
                                break;
                        }
                        break;              
                    case 3:
                        switch(timeFormatCB.getSelectedIndex())
                        {
                            case 0:
                                threadDate.tz = TimeZone.getTimeZone("Europe/France");
                                threadDate.formatDate = new SimpleDateFormat("dd MMMM yyyy h:mm:ss a");
                                break;
                            case 1:
                                threadDate.tz = TimeZone.getTimeZone("Europe/France");
                                threadDate.formatDate = new SimpleDateFormat("dd MMMM yyyy HH:mm:ss");
                                break;
                        }
                        break;
                    case 4:
                        switch(timeFormatCB.getSelectedIndex())
                        {
                            case 0:
                                threadDate.tz = TimeZone.getTimeZone("Europe/France");
                                threadDate.formatDate = new SimpleDateFormat("MM/dd/yy h:mm:ss a");
                                break;
                            case 1:
                                threadDate.tz = TimeZone.getTimeZone("Europe/France");
                                threadDate.formatDate = new SimpleDateFormat("MM/dd/yy HH:mm:ss");
                                break;
                        }
                        break;
                    case 5:
                        switch(timeFormatCB.getSelectedIndex())
                        {
                            case 0:
                                threadDate.tz = TimeZone.getTimeZone("Europe/France");
                                threadDate.formatDate = new SimpleDateFormat("MM/dd/yyyy h:mm:ss a");
                                break;
                            case 1:
                                threadDate.tz = TimeZone.getTimeZone("Europe/France");
                                threadDate.formatDate = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss");
                                break;
                        }
                        break;
                    case 6:
                        switch(timeFormatCB.getSelectedIndex())
                        {
                            case 0:
                                threadDate.tz = TimeZone.getTimeZone("Europe/France");
                                threadDate.formatDate = new SimpleDateFormat("yyyy/MM/dd h:mm:ss a");
                                break;
                            case 1:
                                threadDate.tz = TimeZone.getTimeZone("Europe/France");
                                threadDate.formatDate = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
                                break;
                        }
                        break;
                }
                break;
            case 1:
                switch(dateFormatCB.getSelectedIndex())
                {
                    case 0:
                        switch(timeFormatCB.getSelectedIndex())
                        {
                            case 0:
                                threadDate.tz = TimeZone.getTimeZone("Europe/London");
                                threadDate.formatDate = new SimpleDateFormat("dd/MM/yy h:mm:ss a");
                                break;
                            case 1:
                                threadDate.tz = TimeZone.getTimeZone("Europe/London");
                                threadDate.formatDate = new SimpleDateFormat("dd/MM/yy HH:mm:ss");
                                break;
                        }
                        break;
                    case 1:
                        switch(timeFormatCB.getSelectedIndex())
                        {
                            case 0:
                                threadDate.tz = TimeZone.getTimeZone("Europe/London");
                                threadDate.formatDate = new SimpleDateFormat("dd MMMM yy h:mm:ss a");
                                break;
                            case 1:
                                threadDate.tz = TimeZone.getTimeZone("Europe/London");
                                threadDate.formatDate = new SimpleDateFormat("dd MMMM yy HH:mm:ss");
                                break;
                        }
                        break;
                    case 2:
                        switch(timeFormatCB.getSelectedIndex())
                        {
                            case 0:
                                threadDate.tz = TimeZone.getTimeZone("Europe/London");
                                threadDate.formatDate = new SimpleDateFormat("dd/MM/yyyy h:mm:ss a");
                                break;
                            case 1:
                                threadDate.tz = TimeZone.getTimeZone("Europe/London");
                                threadDate.formatDate = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
                                break;
                        }
                        break;              
                    case 3:
                        switch(timeFormatCB.getSelectedIndex())
                        {
                            case 0:
                                threadDate.tz = TimeZone.getTimeZone("Europe/London");
                                threadDate.formatDate = new SimpleDateFormat("dd MMMM yyyy h:mm:ss a");
                                break;
                            case 1:
                                threadDate.tz = TimeZone.getTimeZone("Europe/London");
                                threadDate.formatDate = new SimpleDateFormat("dd MMMM yyyy HH:mm:ss");
                                break;
                        }
                        break;
                    case 4:
                        switch(timeFormatCB.getSelectedIndex())
                        {
                            case 0:
                                threadDate.tz = TimeZone.getTimeZone("Europe/London");
                                threadDate.formatDate = new SimpleDateFormat("MM/dd/yy h:mm:ss a");
                                break;
                            case 1:
                                threadDate.tz = TimeZone.getTimeZone("Europe/London");
                                threadDate.formatDate = new SimpleDateFormat("MM/dd/yy HH:mm:ss");
                                break;
                        }
                        break;
                    case 5:
                        switch(timeFormatCB.getSelectedIndex())
                        {
                            case 0:
                                threadDate.tz = TimeZone.getTimeZone("Europe/London");
                                threadDate.formatDate = new SimpleDateFormat("MM/dd/yyyy h:mm:ss a");
                                break;
                            case 1:
                                threadDate.tz = TimeZone.getTimeZone("Europe/London");
                                threadDate.formatDate = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss");
                                break;
                        }
                        break;
                    case 6:
                        switch(timeFormatCB.getSelectedIndex())
                        {
                            case 0:
                                threadDate.tz = TimeZone.getTimeZone("Europe/London");
                                threadDate.formatDate = new SimpleDateFormat("yyyy/MM/dd h:mm:ss a");
                                break;
                            case 1:
                                threadDate.tz = TimeZone.getTimeZone("Europe/London");
                                threadDate.formatDate = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
                                break;
                        }
                        break;
                }
                break;
            case 2:
                switch(dateFormatCB.getSelectedIndex())
                {
                    case 0:
                        switch(timeFormatCB.getSelectedIndex())
                        {
                            case 0:
                                threadDate.tz = TimeZone.getTimeZone("Europe/Berlin");
                                threadDate.formatDate = new SimpleDateFormat("dd/MM/yy h:mm:ss a");
                                break;
                            case 1:
                                threadDate.tz = TimeZone.getTimeZone("Europe/Berlin");
                                threadDate.formatDate = new SimpleDateFormat("dd/MM/yy HH:mm:ss");
                                break;
                        }
                        break;
                    case 1:
                        switch(timeFormatCB.getSelectedIndex())
                        {
                            case 0:
                                threadDate.tz = TimeZone.getTimeZone("Europe/Berlin");
                                threadDate.formatDate = new SimpleDateFormat("dd MMMM yy h:mm:ss a");
                                break;
                            case 1:
                                threadDate.tz = TimeZone.getTimeZone("Europe/Berlin");
                                threadDate.formatDate = new SimpleDateFormat("dd MMMM yy HH:mm:ss");
                                break;
                        }
                        break;
                    case 2:
                        switch(timeFormatCB.getSelectedIndex())
                        {
                            case 0:
                                threadDate.tz = TimeZone.getTimeZone("Europe/Berlin");
                                threadDate.formatDate = new SimpleDateFormat("dd/MM/yyyy h:mm:ss a");
                                break;
                            case 1:
                                threadDate.tz = TimeZone.getTimeZone("Europe/Berlin");
                                threadDate.formatDate = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
                                break;
                        }
                        break;              
                    case 3:
                        switch(timeFormatCB.getSelectedIndex())
                        {
                            case 0:
                                threadDate.tz = TimeZone.getTimeZone("Europe/Berlin");
                                threadDate.formatDate = new SimpleDateFormat("dd MMMM yyyy h:mm:ss a");
                                break;
                            case 1:
                                threadDate.tz = TimeZone.getTimeZone("Europe/Berlin");
                                threadDate.formatDate = new SimpleDateFormat("dd MMMM yyyy HH:mm:ss");
                                break;
                        }
                        break;
                    case 4:
                        switch(timeFormatCB.getSelectedIndex())
                        {
                            case 0:
                                threadDate.tz = TimeZone.getTimeZone("Europe/Berlin");
                                threadDate.formatDate = new SimpleDateFormat("MM/dd/yy h:mm:ss a");
                                break;
                            case 1:
                                threadDate.tz = TimeZone.getTimeZone("Europe/Berlin");
                                threadDate.formatDate = new SimpleDateFormat("MM/dd/yy HH:mm:ss");
                                break;
                        }
                        break;
                    case 5:
                        switch(timeFormatCB.getSelectedIndex())
                        {
                            case 0:
                                threadDate.tz = TimeZone.getTimeZone("Europe/Berlin");
                                threadDate.formatDate = new SimpleDateFormat("MM/dd/yyyy h:mm:ss a");
                                break;
                            case 1:
                                threadDate.tz = TimeZone.getTimeZone("Europe/Berlin");
                                threadDate.formatDate = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss");
                                break;
                        }
                        break;
                    case 6:
                        switch(timeFormatCB.getSelectedIndex())
                        {
                            case 0:
                                threadDate.tz = TimeZone.getTimeZone("Europe/Berlin");
                                threadDate.formatDate = new SimpleDateFormat("yyyy/MM/dd h:mm:ss a");
                                break;
                            case 1:
                                threadDate.tz = TimeZone.getTimeZone("Europe/Berlin");
                                threadDate.formatDate = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
                                break;
                        }
                        break;
                }
                break;
            case 3:
                break;
            case 4:
                break;
            case 5:
                break;
        }
        this.dispose();
    }//GEN-LAST:event_OKButtonActionPerformed

    private void CancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelButtonActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_CancelButtonActionPerformed

    private void ApplyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ApplyButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ApplyButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(options.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(options.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(options.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(options.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                options dialog = new options(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ApplyButton;
    private javax.swing.JButton CancelButton;
    private javax.swing.JButton OKButton;
    private javax.swing.JComboBox<String> dateFormatCB;
    private javax.swing.JLabel dateFormatLabel;
    private javax.swing.JComboBox<String> regionCB;
    private javax.swing.JLabel regionLabel;
    private javax.swing.JComboBox<String> timeFormatCB;
    private javax.swing.JLabel timeFormatLabel;
    // End of variables declaration//GEN-END:variables
}
